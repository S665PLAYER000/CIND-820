{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP9kBzMRAB2atVKGMv+voCb"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["##Importing the Libraries\n","import pandas as pd\n","from sklearn.model_selection import train_test_split, cross_val_score\n","from sklearn.preprocessing import LabelEncoder, StandardScaler\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.naive_bayes import GaussianNB\n","from sklearn.metrics import accuracy_score, recall_score, confusion_matrix, classification_report\n","import pprint\n","from google.colab import drive\n","\n","## Mounting my Google Drive\n","drive.mount('/content/drive')\n","\n","## Loading the dataset from Google Drive\n","file_path = '/content/drive/My Drive/CIND 820/german.data' ## Replace with your dataset location\n","\n","column_names = [\n","    \"checking_account\", \"duration\", \"credit_history\", \"purpose\", \"credit_amount\",\n","    \"savings_account\", \"employment\", \"installment_rate\", \"personal_status\",\n","    \"other_debtors\", \"residence_since\", \"property\", \"age\", \"other_installment_plans\",\n","    \"housing\", \"existing_credits\", \"job\", \"people_liable\", \"telephone\",\n","    \"foreign_worker\", \"credit_risk\"\n","]\n","\n","df = pd.read_csv(file_path, sep=' ', header=None, names=column_names)\n","\n","## Converting the target to binary\n","df['credit_risk'] = df['credit_risk'].map({1: 1, 2: 0})\n","\n","## Label encoding all text columns\n","label_encoder = LabelEncoder()\n","for column in df.columns:\n","    if df[column].dtype == 'object':\n","        df[column] = label_encoder.fit_transform(df[column])\n","\n","## Separating features and target\n","X = df.drop(\"credit_risk\", axis=1)\n","y = df[\"credit_risk\"]\n","\n","## Scaling the features for better model performance and efficiency\n","scaler = StandardScaler()\n","X_scaled = scaler.fit_transform(X)\n","\n","## Splitting into train and test sets\n","X_train, X_test, y_train, y_test = train_test_split(\n","    X_scaled, y, test_size=0.2, random_state=1, stratify=y\n",")\n","\n","## Defining and training my models\n","models = {\n","    \"Logistic Regression\": LogisticRegression(max_iter=3000),\n","    \"Decision Tree\": DecisionTreeClassifier(random_state=1),\n","    \"Naive Bayes\": GaussianNB()\n","}\n","\n","## Evaluating my models\n","results = {}\n","\n","for name, model in models.items():\n","    model.fit(X_train, y_train)\n","    predictions = model.predict(X_test)\n","\n","    acc = accuracy_score(y_test, predictions)\n","    rec = recall_score(y_test, predictions)\n","    cm = confusion_matrix(y_test, predictions)\n","    report = classification_report(y_test, predictions, output_dict=True)\n","    cv_score = cross_val_score(model, X_train, y_train, cv=5).mean()\n","\n","    results[name] = {\n","        \"Accuracy\": round(acc, 3),\n","        \"Recall\": round(rec, 3),\n","        \"Cross-Validation Accuracy\": round(cv_score, 3),\n","        \"Confusion Matrix\": cm\n","    }\n","\n","## Showing the results\n","pprint.pprint(results)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tFaP4lJa4uL6","executionInfo":{"status":"ok","timestamp":1752466817624,"user_tz":240,"elapsed":1191,"user":{"displayName":"Strahinja Nakic","userId":"12100632085908492526"}},"outputId":"6eb54090-581e-43af-f385-e476c0bc225a"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","{'Decision Tree': {'Accuracy': 0.72,\n","                   'Confusion Matrix': array([[ 35,  25],\n","       [ 31, 109]]),\n","                   'Cross-Validation Accuracy': np.float64(0.684),\n","                   'Recall': 0.779},\n"," 'Logistic Regression': {'Accuracy': 0.76,\n","                         'Confusion Matrix': array([[ 31,  29],\n","       [ 19, 121]]),\n","                         'Cross-Validation Accuracy': np.float64(0.76),\n","                         'Recall': 0.864},\n"," 'Naive Bayes': {'Accuracy': 0.76,\n","                 'Confusion Matrix': array([[ 39,  21],\n","       [ 27, 113]]),\n","                 'Cross-Validation Accuracy': np.float64(0.721),\n","                 'Recall': 0.807}}\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"jeaX3ApDJoUF"},"execution_count":null,"outputs":[]}]}